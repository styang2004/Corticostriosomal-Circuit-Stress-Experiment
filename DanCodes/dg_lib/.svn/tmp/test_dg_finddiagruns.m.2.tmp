function test_dg_findDiagRuns

%$Rev$
%$Date$
%$Author$

M{1} = [
    1 0 0
    0 1 0
    0 0 1
    ];
numsout{1} = [
    0   1   3
    -2  0   0
    -1  0   0
    1   0   0
    2   0   0
    ];

M{2} = [
    1 0
    0 1
    ];
numsout{2} = [
    0   1   2
    -1  0   0
    1   0   0
    ];

M{3} = [
    0 1 0
    0 1 1
    0 0 1
    ];
numsout{3} = [
    0   2   2
    1   1   2
    -2  0   0
    -1  0   0
    2   0   0
    ];

M{4} = [
    0 0 0
    1 1 0
    0 1 1
    ];
numsout{4} = [
    -1  1   2
    0   2   2
    -2  0   0
    1   0   0
    2   0   0
    ];

M{5} = [
    0 1 1
    1 0 1
    1 1 0
    ];
numsout{5} = [
    -1  1   2
    1   1   2
    -2  0   0
    0   0   0
    2   0   0
    ];

M{6} = [
    0 0 0
    0 0 0
    0 0 0
    ];
numsout{6} = [
    -2  0   0
    -1  0   0
    0   0   0
    1   0   0
    2   0   0
    ];

M{7} = [
    0 0 1
    0 1 0
    1 0 0
    ];
numsout{7} = [
    -2  0   0
    -1  0   0
    0   0   0
    1   0   0
    2   0   0
    ];

M{8} = [
    0 1 1
    0 0 1
    0 0 0
    ];
numsout{8} = [
    1   1   2
    -2  0   0
    -1  0   0
    0   0   0
    2   0   0
    ];

M{9} = [
    0 0 0
    1 0 0
    1 1 0
    ];
numsout{9} = [
    -1  1   2
    -2  0   0
    0   0   0
    1   0   0
    2   0   0
    ];

M{10} = [
    1 0 0 0
    0 1 0 0
    0 0 1 0
    ];
numsout{10} = [
    0   1   3
    -2  0   0
    -1  0   0
    1   0   0
    2   0   0
    3   0   0
    ];

M{11} = [
    1 0 0 0 0
    0 1 0 0 0
    0 0 1 0 0
    0 0 0 1 0
    0 0 0 0 1
    1 1 1 1 1
    ];
numsout{11} = [
    0   1   5
    -5  0   0
    -4  0   0
    -3  0   0
    -2  0   0
    -1  0   0
    1   0   0
    2   0   0
    3   0   0
    4   0   0
    ];

M{12} = [
    1 0 0 0 0
    0 1 0 0 0
    0 0 0 0 0
    0 0 0 1 0
    0 0 0 0 1
    1 1 1 1 1
    ];
numsout{12} = [
    0   1   2
    0   4   2
    -5  0   0
    -4  0   0
    -3  0   0
    -2  0   0
    -1  0   0
    1   0   0
    2   0   0
    3   0   0
    4   0   0
    ];

M{13} = [
    0 1 0 0 0
    0 0 1 0 0
    0 0 0 0 0
    0 0 0 1 0
    0 0 0 1 0
    1 1 1 1 1
    ];
numsout{13} = [
    -1	4   2
    1   1   2
    -5  0   0
    -4  0   0
    -3  0   0
    -2  0   0
    0   0   0
    2   0   0
    3   0   0
    4   0   0
    ];

M{14} = [
    1 1 0 1 0 1 0
    1 1 1 0 1 0 1
    1 0 0 1 0 1 0
    1 0 0 1 0 0 1
    1 0 0 1 1 0 0
    1 1 1 1 1 1 0
    ];
numsout{14} = [
    3   1   4
    0   4   3
    1   1   3
    -4  1   2
    -1  4   2
    0   1   2
    5   1   2
    -5  0   0
    -3  0   0
    -2  0   0
    2   0   0
    4   0   0
    6   0   0
    ];

M{15} = [
    0 0 0 0 0 0 0
    1 1 1 0 1 0 1
    1 0 0 1 0 1 0
    0 0 0 1 0 0 0
    0 1 0 1 1 1 0
    1 1 1 1 1 1 1
    ];
numsout{15} = [
    0   4   3
    -3  2   2
    -1  4   2
    1   2   2
    1   5   2
    3   2   2
    -5  0   0
    -4  0   0
    -2  0   0
    2   0   0
    4   0   0
    5   0   0
    6   0   0
    ];


%%%%%%%%%%%%%%%%%%%%%%%%%%%% end test cases %%%%%%%%%%%%%%%%%%%%%%%%%%%%

for r = 1: length(M)
    [k, runstart, runsum] = dg_findDiagRuns(M{r});
    if ~isequalwithequalnans([k, runstart, runsum], numsout{r})
        disp([ sprintf('Failed test %d: [a,b,c]=dg_findDiagRuns(', r), ...
            dg_thing2str(M{r}) '); [a,b,c]' ]);
        return
    end
end
disp(sprintf('All %d tests completed successfully',r));
