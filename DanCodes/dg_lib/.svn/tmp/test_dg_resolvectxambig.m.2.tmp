function test_dg_resolveCtxAmbig

%$Rev$
%$Date$
%$Author$

% col 1=p, 2=a, 3=p, 4=ambiguous, 5=unmatchable
inout = {
    [1 1; 2 2; 4 4; 8 8; 9 9] ...
    {[3] [2 3 5]; 5 [2 5 6]; 6 [2 5 9]; 7 [ 2 5 6]} ...
    [1 1; 2 2; 3 3; 4 4; 6 5; 7 6; 8 8; 9 9] ...
    cell(0,2) ...
    {5 [2 5 6]}
    [1 1; 2 2; 4 4; 8 8; 9 9] ...
    {[3] [2 3 5]; 5 [2 5 6]; 7 [ 2 5 6]} ...
    [1 1; 2 2; 3 3; 4 4; 8 8; 9 9] ...
    {5 [2 5 6]; 7 [ 2 5 6]} ...
    cell(0,2)
    [1 1; 2 2; 4 4; 8 8; 9 9] ...
    {[3] [2 3 5]; 5 [2 5 8]; 7 [ 2 5 6]} ...
    [1 1; 2 2; 3 3; 4 4; 5 5; 7 6; 8 8; 9 9] ...
    cell(0,2) ...
    cell(0,2)
    [1 1; 2 2; 4 4; 8 8; 9 9] ...
    {0 [0 1]; 3 [2 3 5]; 5 [2 5 8]; 7 [ 2 5 6]; 10 [20 30]} ...
    [0 0; 1 1; 2 2; 3 3; 4 4; 5 5; 7 6; 8 8; 9 9] ...
    {10 [20 30]} ...
    cell(0,2)
    [1 1; 2 2; 4 4; 8 8; 9 9] ...
    {0 [0 1]; 3 [2 3 5]; 5 [2 5 8]; 7 [ 2 5 6]; 10 [2 30]} ...
    [0 0; 1 1; 2 2; 3 3; 4 4; 5 5; 7 6; 8 8; 9 9; 10 30] ...
    cell(0,2) ...
    cell(0,2) 
};

for r = 1: size(inout,1)
    [a b c] = dg_resolveCtxAmbig(inout{r,1}, inout{r,2});
    if ~isequal(a, inout{r,3}) ...
            ||  ~isequal(b, inout{r,4}) ...
            ||  ~isequal(c, inout{r,5})
        disp(sprintf('Failed test %d: %s, %s', ...
            r, dg_thing2str(inout{r,1}), dg_thing2str(inout{r,2})));
        return
    end
end
disp('Test completed successfully');
